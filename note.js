如果项目中的场景很多，随着新场景的切换，内存占用就会不断上升
除了使用 cc.loader.release 等 API 来精确释放不使用的资源
我们还可以使用场景的自动释放功能。要配置自动释放
可以在 资源管理器 中选中所需场景，然后在 属性检查器 中设置“自动释放资源”选项，该项默认关闭。

启用了某个场景的资源自动释放后，如果在脚本中保存了对该场景的资源的“特殊引用”
当场景切换后，由于资源已经被释放，这些引用可能会变成非法的，有可能引起渲染异常等问题
为了让这部分资源在场景切换时不被释放，我们可以使用 cc.loader.setAutoRelease 或者 cc.loader.setAutoReleaseRecursively 来保留这些资源。

“特殊引用”指的是以全局变量、单例、闭包、“特殊组件”、“动态资源”等形式进行的引用
“特殊组件”是指通过 cc.game.addPersistRootNode 方法设置的常驻节点及其子节点上的组件
并且这些组件中包含以字符串 URL 或 UUID，或者以除了数组和字典外的其它容器去保存的资源引用
“动态资源”指的是在脚本中动态创建或动态修改的资源。这些资源如果还引用到场景中的其它资源
则就算动态资源本身不应该释放，其它资源默认还是会被场景自动释放。

图像资源（Texture）又经常被称作贴图、图片

在 资源管理器 中，图像资源的左边会显示一个和文件夹类似的三角图标，点击就可以展开看到它的子资源（sub asset）
每个图像资源导入后编辑器会自动在它下面创建同名的 SpriteFrame 资源。
SpriteFrame 是核心渲染组件 Sprite 所使用的资源，设置或替换 Sprite 组件中的 spriteFrame 属性，就可以切换显示的图像

为什么会有 SpriteFrame 这种资源？
这样的设置是因为除了每个文件产生一个 SpriteFrame 的图像资源（Texture）之外
我们还有包含多个 SpriteFrame 的图集资源（Atlas）类型

var newStar = cc.instantiate(this.starPrefab);
// 在星星组件上暂存 Game 对象的引用
newStar.getComponent('Star').game = this;
        
settings 里保存项目相关的设置，如 构建发布 菜单里的包名、场景和平台选择等。这些设置需要和项目一起进行版本控制。

local 文件夹中包含该项目的本地设置，包括编辑器面板布局，窗口大小，位置等信息。您不需要关心这里的内容，只要按照您的习惯设置编辑器布局，这些就会自动保存在这个文件夹。一般 local 也不需要进入版本控制。

project.json 文件和 assets 文件夹一起，作为验证 Cocos Creator 项目合法性的标志
只用来规定当前使用的引擎类型和插件存储位置，不需要用户关心其内容。这个文件也应该纳入版本控制。

当用户按住 Alt/Option 的同时点击该按钮，除了执行这个文件夹自身的展开/折叠操作之外，还会同时展开/折叠该文件夹下的所有子节点。

拷贝/粘贴：将节点复制到剪贴板上，然后可以粘贴到另外的位置，或打开另一个场景来粘贴刚才拷贝的节点。
复制节点：生成和选中节点完全相同的节点副本，生成节点和选中节点在同一层级中。

锁定节点：鼠标移到节点上，左侧会有一个锁定按钮，节点锁定后无法在 场景编辑器 内选中该节点。

当在搜索按钮中选择 组件 类型时，搜索栏中会出现 t: 的符号，在后面输入需要查找的组件名称即可（例如 t:cc.Camera）。

需要拖拽资源赋值的属性栏上会显示蓝色的标签

刷新编辑器窗口（按 Ctrl / Cmd + R
Ctrl+L 清空控制台
程序运行到debugger就会自动停止运行	
console.trace() 会输出函数调用堆栈
console.table() 会把一个对象按表格形式输出
console.time() 和 console.timeEnd()得到一段代码的执行时间

Cannot read property 'style' of null
JS运行的时候你的页面还没有加载完成，所以你的JS代码找不到你的页面元素，就会抛出这个问题

使用addChild方法就会处发onload等方法
脚本里的onload与自定义方法谁先调用，根据addchild与调用自定义方法的先后决定
注意先调用自定义方法，赋值，在调用addChild


Draw Call//表示引擎对当前画面的绘制次数

--cc.Class 是一个由 cc.Component 派生出来的组件类
--Camera属性
  --ZoomRatio：视图缩放
  --BackgroundColor：颜色缓冲区清空时显示的底色，将 background 删除后，将显示 BackgroundColor 所设置的颜色。
  --Depth：摄像机的深度缓冲值。
  --cullingMask：删除 Mask 值设置，如果您希望某些 Node 属性不显示，可以使用它。
  --clearFlags：是否清空颜色缓冲、深度缓冲、模版缓冲区